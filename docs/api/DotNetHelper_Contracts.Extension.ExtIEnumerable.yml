### YamlMime:ManagedReference
items:
- uid: DotNetHelper_Contracts.Extension.ExtIEnumerable
  commentId: T:DotNetHelper_Contracts.Extension.ExtIEnumerable
  id: ExtIEnumerable
  parent: DotNetHelper_Contracts.Extension
  children:
  - DotNetHelper_Contracts.Extension.ExtIEnumerable.ContainAnySameItem(IEnumerable{System.String},IEnumerable{System.String})
  - DotNetHelper_Contracts.Extension.ExtIEnumerable.IsNullOrEmpty(IEnumerable)
  langs:
  - csharp
  - vb
  name: ExtIEnumerable
  nameWithType: ExtIEnumerable
  fullName: DotNetHelper_Contracts.Extension.ExtIEnumerable
  type: Class
  source:
    id: ExtIEnumerable
    path: ''
    startLine: 1297
  assemblies:
  - cs.temp.dll
  namespace: DotNetHelper_Contracts.Extension
  syntax:
    content: public static class ExtIEnumerable
    content.vb: Public Module ExtIEnumerable
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: DotNetHelper_Contracts.Extension.ExtIEnumerable.IsNullOrEmpty(IEnumerable)
  commentId: M:DotNetHelper_Contracts.Extension.ExtIEnumerable.IsNullOrEmpty(IEnumerable)
  id: IsNullOrEmpty(IEnumerable)
  isExtensionMethod: true
  parent: DotNetHelper_Contracts.Extension.ExtIEnumerable
  langs:
  - csharp
  - vb
  name: IsNullOrEmpty(IEnumerable)
  nameWithType: ExtIEnumerable.IsNullOrEmpty(IEnumerable)
  fullName: DotNetHelper_Contracts.Extension.ExtIEnumerable.IsNullOrEmpty(IEnumerable)
  type: Method
  source:
    id: IsNullOrEmpty
    path: ''
    startLine: 1305
  assemblies:
  - cs.temp.dll
  namespace: DotNetHelper_Contracts.Extension
  summary: "\nMethod Name Pretty Much Says It All\n"
  example: []
  syntax:
    content: public static bool IsNullOrEmpty(this IEnumerable source)
    parameters:
    - id: source
      type: IEnumerable
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsNullOrEmpty(source As IEnumerable) As Boolean
  overload: DotNetHelper_Contracts.Extension.ExtIEnumerable.IsNullOrEmpty*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: DotNetHelper_Contracts.Extension.ExtIEnumerable.ContainAnySameItem(IEnumerable{System.String},IEnumerable{System.String})
  commentId: M:DotNetHelper_Contracts.Extension.ExtIEnumerable.ContainAnySameItem(IEnumerable{System.String},IEnumerable{System.String})
  id: ContainAnySameItem(IEnumerable{System.String},IEnumerable{System.String})
  isExtensionMethod: true
  parent: DotNetHelper_Contracts.Extension.ExtIEnumerable
  langs:
  - csharp
  - vb
  name: ContainAnySameItem(IEnumerable<String>, IEnumerable<String>)
  nameWithType: ExtIEnumerable.ContainAnySameItem(IEnumerable<String>, IEnumerable<String>)
  fullName: DotNetHelper_Contracts.Extension.ExtIEnumerable.ContainAnySameItem(IEnumerable<System.String>, IEnumerable<System.String>)
  type: Method
  source:
    id: ContainAnySameItem
    path: ''
    startLine: 1312
  assemblies:
  - cs.temp.dll
  namespace: DotNetHelper_Contracts.Extension
  syntax:
    content: public static bool ContainAnySameItem(this IEnumerable<string> a, IEnumerable<string> b)
    parameters:
    - id: a
      type: IEnumerable{System.String}
    - id: b
      type: IEnumerable{System.String}
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ContainAnySameItem(a As IEnumerable(Of String), b As IEnumerable(Of String)) As Boolean
  overload: DotNetHelper_Contracts.Extension.ExtIEnumerable.ContainAnySameItem*
  nameWithType.vb: ExtIEnumerable.ContainAnySameItem(IEnumerable(Of String), IEnumerable(Of String))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: DotNetHelper_Contracts.Extension.ExtIEnumerable.ContainAnySameItem(IEnumerable(Of System.String), IEnumerable(Of System.String))
  name.vb: ContainAnySameItem(IEnumerable(Of String), IEnumerable(Of String))
references:
- uid: DotNetHelper_Contracts.Extension
  commentId: N:DotNetHelper_Contracts.Extension
  name: DotNetHelper_Contracts.Extension
  nameWithType: DotNetHelper_Contracts.Extension
  fullName: DotNetHelper_Contracts.Extension
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: DotNetHelper_Contracts.Extension.ExtIEnumerable.IsNullOrEmpty*
  commentId: Overload:DotNetHelper_Contracts.Extension.ExtIEnumerable.IsNullOrEmpty
  name: IsNullOrEmpty
  nameWithType: ExtIEnumerable.IsNullOrEmpty
  fullName: DotNetHelper_Contracts.Extension.ExtIEnumerable.IsNullOrEmpty
- uid: IEnumerable
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: IEnumerable
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: DotNetHelper_Contracts.Extension.ExtIEnumerable.ContainAnySameItem*
  commentId: Overload:DotNetHelper_Contracts.Extension.ExtIEnumerable.ContainAnySameItem
  name: ContainAnySameItem
  nameWithType: ExtIEnumerable.ContainAnySameItem
  fullName: DotNetHelper_Contracts.Extension.ExtIEnumerable.ContainAnySameItem
- uid: IEnumerable{System.String}
  commentId: '!:IEnumerable{System.String}'
  definition: IEnumerable`1
  name: IEnumerable<String>
  nameWithType: IEnumerable<String>
  fullName: IEnumerable<System.String>
  nameWithType.vb: IEnumerable(Of String)
  fullName.vb: IEnumerable(Of System.String)
  name.vb: IEnumerable(Of String)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
