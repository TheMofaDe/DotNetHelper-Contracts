### YamlMime:ManagedReference
items:
- uid: DotNetHelper_Contracts.Helpers.Reflect
  commentId: T:DotNetHelper_Contracts.Helpers.Reflect
  id: Reflect
  parent: DotNetHelper_Contracts.Helpers
  children:
  - DotNetHelper_Contracts.Helpers.Reflect.GetPropertyInfo``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})
  - DotNetHelper_Contracts.Helpers.Reflect.GetPropertyName``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})
  langs:
  - csharp
  - vb
  name: Reflect
  nameWithType: Reflect
  fullName: DotNetHelper_Contracts.Helpers.Reflect
  type: Class
  source:
    remote:
      path: src/DotNetHelper-Contracts/Helpers/DynamicObject.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-Contracts
    id: Reflect
    path: ../src/DotNetHelper-Contracts/Helpers/DynamicObject.cs
    startLine: 97
  assemblies:
  - DotNetHelper-Contracts
  namespace: DotNetHelper_Contracts.Helpers
  summary: "\nProvides various reflection-related methods.\n"
  example: []
  syntax:
    content: public static class Reflect
    content.vb: Public Module Reflect
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: DotNetHelper_Contracts.Helpers.Reflect.GetPropertyName``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})
  commentId: M:DotNetHelper_Contracts.Helpers.Reflect.GetPropertyName``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})
  id: GetPropertyName``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})
  parent: DotNetHelper_Contracts.Helpers.Reflect
  langs:
  - csharp
  - vb
  name: GetPropertyName<TSource, TProperty>(Expression<Func<TSource, TProperty>>)
  nameWithType: Reflect.GetPropertyName<TSource, TProperty>(Expression<Func<TSource, TProperty>>)
  fullName: DotNetHelper_Contracts.Helpers.Reflect.GetPropertyName<TSource, TProperty>(System.Linq.Expressions.Expression<System.Func<TSource, TProperty>>)
  type: Method
  source:
    remote:
      path: src/DotNetHelper-Contracts/Helpers/DynamicObject.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-Contracts
    id: GetPropertyName
    path: ../src/DotNetHelper-Contracts/Helpers/DynamicObject.cs
    startLine: 115
  assemblies:
  - DotNetHelper-Contracts
  namespace: DotNetHelper_Contracts.Helpers
  summary: "\nReturns the name of the property referred to by the specified property expression.\n"
  example: []
  syntax:
    content: public static string GetPropertyName<TSource, TProperty>(Expression<Func<TSource, TProperty>> propertyExpression)
    parameters:
    - id: propertyExpression
      type: System.Linq.Expressions.Expression{System.Func{{TSource},{TProperty}}}
      description: "\nAn <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> representing a Func mapping an instance of type TSource\nto an instance of type TProperty.\n"
    typeParameters:
    - id: TSource
      description: "\nType containing the property.\n"
    - id: TProperty
      description: "\nType of the property.\n"
    return:
      type: System.String
      description: "\nThe name of the property referred to by the specified property expression.\n"
    content.vb: Public Shared Function GetPropertyName(Of TSource, TProperty)(propertyExpression As Expression(Of Func(Of TSource, TProperty))) As String
  overload: DotNetHelper_Contracts.Helpers.Reflect.GetPropertyName*
  nameWithType.vb: Reflect.GetPropertyName(Of TSource, TProperty)(Expression(Of Func(Of TSource, TProperty)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: DotNetHelper_Contracts.Helpers.Reflect.GetPropertyName(Of TSource, TProperty)(System.Linq.Expressions.Expression(Of System.Func(Of TSource, TProperty)))
  name.vb: GetPropertyName(Of TSource, TProperty)(Expression(Of Func(Of TSource, TProperty)))
- uid: DotNetHelper_Contracts.Helpers.Reflect.GetPropertyInfo``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})
  commentId: M:DotNetHelper_Contracts.Helpers.Reflect.GetPropertyInfo``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})
  id: GetPropertyInfo``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})
  parent: DotNetHelper_Contracts.Helpers.Reflect
  langs:
  - csharp
  - vb
  name: GetPropertyInfo<TSource, TProperty>(Expression<Func<TSource, TProperty>>)
  nameWithType: Reflect.GetPropertyInfo<TSource, TProperty>(Expression<Func<TSource, TProperty>>)
  fullName: DotNetHelper_Contracts.Helpers.Reflect.GetPropertyInfo<TSource, TProperty>(System.Linq.Expressions.Expression<System.Func<TSource, TProperty>>)
  type: Method
  source:
    remote:
      path: src/DotNetHelper-Contracts/Helpers/DynamicObject.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-Contracts
    id: GetPropertyInfo
    path: ../src/DotNetHelper-Contracts/Helpers/DynamicObject.cs
    startLine: 143
  assemblies:
  - DotNetHelper-Contracts
  namespace: DotNetHelper_Contracts.Helpers
  summary: "\nReturns a <xref href=\"System.Reflection.PropertyInfo\" data-throw-if-not-resolved=\"false\"></xref> instance for the property referred to by the specified\nproperty expression.\n"
  example: []
  syntax:
    content: public static PropertyInfo GetPropertyInfo<TSource, TProperty>(Expression<Func<TSource, TProperty>> propertyExpression)
    parameters:
    - id: propertyExpression
      type: System.Linq.Expressions.Expression{System.Func{{TSource},{TProperty}}}
      description: "\nAn <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> representing a Func mapping an instance of type TSource to an instance\nof type TProperty.\n"
    typeParameters:
    - id: TSource
      description: "\nType containing the property.\n"
    - id: TProperty
      description: "\nType of the property.\n"
    return:
      type: System.Reflection.PropertyInfo
      description: "\nA <xref href=\"System.Reflection.PropertyInfo\" data-throw-if-not-resolved=\"false\"></xref> instance for the property referred to by the specified\nproperty expression.\n"
    content.vb: Public Shared Function GetPropertyInfo(Of TSource, TProperty)(propertyExpression As Expression(Of Func(Of TSource, TProperty))) As PropertyInfo
  overload: DotNetHelper_Contracts.Helpers.Reflect.GetPropertyInfo*
  nameWithType.vb: Reflect.GetPropertyInfo(Of TSource, TProperty)(Expression(Of Func(Of TSource, TProperty)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: DotNetHelper_Contracts.Helpers.Reflect.GetPropertyInfo(Of TSource, TProperty)(System.Linq.Expressions.Expression(Of System.Func(Of TSource, TProperty)))
  name.vb: GetPropertyInfo(Of TSource, TProperty)(Expression(Of Func(Of TSource, TProperty)))
references:
- uid: DotNetHelper_Contracts.Helpers
  commentId: N:DotNetHelper_Contracts.Helpers
  name: DotNetHelper_Contracts.Helpers
  nameWithType: DotNetHelper_Contracts.Helpers
  fullName: DotNetHelper_Contracts.Helpers
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Linq.Expressions.Expression
  commentId: T:System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: true
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: DotNetHelper_Contracts.Helpers.Reflect.GetPropertyName*
  commentId: Overload:DotNetHelper_Contracts.Helpers.Reflect.GetPropertyName
  name: GetPropertyName
  nameWithType: Reflect.GetPropertyName
  fullName: DotNetHelper_Contracts.Helpers.Reflect.GetPropertyName
- uid: System.Linq.Expressions.Expression{System.Func{{TSource},{TProperty}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{``0,``1}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TSource, TProperty>>
  nameWithType: Expression<Func<TSource, TProperty>>
  fullName: System.Linq.Expressions.Expression<System.Func<TSource, TProperty>>
  nameWithType.vb: Expression(Of Func(Of TSource, TProperty))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TSource, TProperty))
  name.vb: Expression(Of Func(Of TSource, TProperty))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TProperty
    nameWithType: TProperty
    fullName: TProperty
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TProperty
    nameWithType: TProperty
    fullName: TProperty
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Linq.Expressions
  commentId: N:System.Linq.Expressions
  isExternal: true
  name: System.Linq.Expressions
  nameWithType: System.Linq.Expressions
  fullName: System.Linq.Expressions
- uid: System.Linq.Expressions.Expression`1
  commentId: T:System.Linq.Expressions.Expression`1
  isExternal: true
  name: Expression<TDelegate>
  nameWithType: Expression<TDelegate>
  fullName: System.Linq.Expressions.Expression<TDelegate>
  nameWithType.vb: Expression(Of TDelegate)
  fullName.vb: System.Linq.Expressions.Expression(Of TDelegate)
  name.vb: Expression(Of TDelegate)
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TDelegate
    nameWithType: TDelegate
    fullName: TDelegate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TDelegate
    nameWithType: TDelegate
    fullName: TDelegate
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.PropertyInfo
  commentId: T:System.Reflection.PropertyInfo
  parent: System.Reflection
  isExternal: true
  name: PropertyInfo
  nameWithType: PropertyInfo
  fullName: System.Reflection.PropertyInfo
- uid: DotNetHelper_Contracts.Helpers.Reflect.GetPropertyInfo*
  commentId: Overload:DotNetHelper_Contracts.Helpers.Reflect.GetPropertyInfo
  name: GetPropertyInfo
  nameWithType: Reflect.GetPropertyInfo
  fullName: DotNetHelper_Contracts.Helpers.Reflect.GetPropertyInfo
- uid: System.Reflection
  commentId: N:System.Reflection
  isExternal: true
  name: System.Reflection
  nameWithType: System.Reflection
  fullName: System.Reflection
