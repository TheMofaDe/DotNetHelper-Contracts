### YamlMime:ManagedReference
items:
- uid: DotNetHelper_Contracts.Extension.ExtCollection
  commentId: T:DotNetHelper_Contracts.Extension.ExtCollection
  id: ExtCollection
  parent: DotNetHelper_Contracts.Extension
  children:
  - DotNetHelper_Contracts.Extension.ExtCollection.AddRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.ICollection{``0})
  - DotNetHelper_Contracts.Extension.ExtCollection.AddRange``1(System.Data.IDataParameterCollection,System.Collections.Generic.IEnumerable{``0})
  - DotNetHelper_Contracts.Extension.ExtCollection.ForEach``1(System.Collections.Generic.ICollection{``0},System.Action{``0})
  - DotNetHelper_Contracts.Extension.ExtCollection.IsNullOrEmpty(System.Collections.ICollection)
  - DotNetHelper_Contracts.Extension.ExtCollection.ParamToSql(System.Data.IDataParameterCollection,System.String)
  - DotNetHelper_Contracts.Extension.ExtCollection.RemoveRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.ICollection{``0})
  langs:
  - csharp
  - vb
  name: ExtCollection
  nameWithType: ExtCollection
  fullName: DotNetHelper_Contracts.Extension.ExtCollection
  type: Class
  source:
    remote:
      path: src/DotNetHelper-Contracts/Extension/ExtList.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-Contracts
    id: ExtCollection
    path: ../src/DotNetHelper-Contracts/Extension/ExtList.cs
    startLine: 140
  assemblies:
  - DotNetHelper-Contracts
  namespace: DotNetHelper_Contracts.Extension
  syntax:
    content: public static class ExtCollection
    content.vb: Public Module ExtCollection
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: DotNetHelper_Contracts.Extension.ExtCollection.IsNullOrEmpty(System.Collections.ICollection)
  commentId: M:DotNetHelper_Contracts.Extension.ExtCollection.IsNullOrEmpty(System.Collections.ICollection)
  id: IsNullOrEmpty(System.Collections.ICollection)
  isExtensionMethod: true
  parent: DotNetHelper_Contracts.Extension.ExtCollection
  langs:
  - csharp
  - vb
  name: IsNullOrEmpty(ICollection)
  nameWithType: ExtCollection.IsNullOrEmpty(ICollection)
  fullName: DotNetHelper_Contracts.Extension.ExtCollection.IsNullOrEmpty(System.Collections.ICollection)
  type: Method
  source:
    remote:
      path: src/DotNetHelper-Contracts/Extension/ExtList.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-Contracts
    id: IsNullOrEmpty
    path: ../src/DotNetHelper-Contracts/Extension/ExtList.cs
    startLine: 149
  assemblies:
  - DotNetHelper-Contracts
  namespace: DotNetHelper_Contracts.Extension
  summary: "\n\n"
  example: []
  syntax:
    content: public static bool IsNullOrEmpty(this ICollection source)
    parameters:
    - id: source
      type: System.Collections.ICollection
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsNullOrEmpty(source As ICollection) As Boolean
  overload: DotNetHelper_Contracts.Extension.ExtCollection.IsNullOrEmpty*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: DotNetHelper_Contracts.Extension.ExtCollection.ForEach``1(System.Collections.Generic.ICollection{``0},System.Action{``0})
  commentId: M:DotNetHelper_Contracts.Extension.ExtCollection.ForEach``1(System.Collections.Generic.ICollection{``0},System.Action{``0})
  id: ForEach``1(System.Collections.Generic.ICollection{``0},System.Action{``0})
  isExtensionMethod: true
  parent: DotNetHelper_Contracts.Extension.ExtCollection
  langs:
  - csharp
  - vb
  name: ForEach<T>(ICollection<T>, Action<T>)
  nameWithType: ExtCollection.ForEach<T>(ICollection<T>, Action<T>)
  fullName: DotNetHelper_Contracts.Extension.ExtCollection.ForEach<T>(System.Collections.Generic.ICollection<T>, System.Action<T>)
  type: Method
  source:
    remote:
      path: src/DotNetHelper-Contracts/Extension/ExtList.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-Contracts
    id: ForEach
    path: ../src/DotNetHelper-Contracts/Extension/ExtList.cs
    startLine: 154
  assemblies:
  - DotNetHelper-Contracts
  namespace: DotNetHelper_Contracts.Extension
  syntax:
    content: public static ICollection<T> ForEach<T>(this ICollection<T> collection, Action<T> action)
    parameters:
    - id: collection
      type: System.Collections.Generic.ICollection{{T}}
    - id: action
      type: System.Action{{T}}
    typeParameters:
    - id: T
    return:
      type: System.Collections.Generic.ICollection{{T}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ForEach(Of T)(collection As ICollection(Of T), action As Action(Of T)) As ICollection(Of T)
  overload: DotNetHelper_Contracts.Extension.ExtCollection.ForEach*
  nameWithType.vb: ExtCollection.ForEach(Of T)(ICollection(Of T), Action(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: DotNetHelper_Contracts.Extension.ExtCollection.ForEach(Of T)(System.Collections.Generic.ICollection(Of T), System.Action(Of T))
  name.vb: ForEach(Of T)(ICollection(Of T), Action(Of T))
- uid: DotNetHelper_Contracts.Extension.ExtCollection.AddRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.ICollection{``0})
  commentId: M:DotNetHelper_Contracts.Extension.ExtCollection.AddRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.ICollection{``0})
  id: AddRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.ICollection{``0})
  isExtensionMethod: true
  parent: DotNetHelper_Contracts.Extension.ExtCollection
  langs:
  - csharp
  - vb
  name: AddRange<T>(ICollection<T>, ICollection<T>)
  nameWithType: ExtCollection.AddRange<T>(ICollection<T>, ICollection<T>)
  fullName: DotNetHelper_Contracts.Extension.ExtCollection.AddRange<T>(System.Collections.Generic.ICollection<T>, System.Collections.Generic.ICollection<T>)
  type: Method
  source:
    remote:
      path: src/DotNetHelper-Contracts/Extension/ExtList.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-Contracts
    id: AddRange
    path: ../src/DotNetHelper-Contracts/Extension/ExtList.cs
    startLine: 163
  assemblies:
  - DotNetHelper-Contracts
  namespace: DotNetHelper_Contracts.Extension
  syntax:
    content: public static void AddRange<T>(this ICollection<T> collection, ICollection<T> collectionToAdd)
    parameters:
    - id: collection
      type: System.Collections.Generic.ICollection{{T}}
    - id: collectionToAdd
      type: System.Collections.Generic.ICollection{{T}}
    typeParameters:
    - id: T
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub AddRange(Of T)(collection As ICollection(Of T), collectionToAdd As ICollection(Of T))
  overload: DotNetHelper_Contracts.Extension.ExtCollection.AddRange*
  nameWithType.vb: ExtCollection.AddRange(Of T)(ICollection(Of T), ICollection(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: DotNetHelper_Contracts.Extension.ExtCollection.AddRange(Of T)(System.Collections.Generic.ICollection(Of T), System.Collections.Generic.ICollection(Of T))
  name.vb: AddRange(Of T)(ICollection(Of T), ICollection(Of T))
- uid: DotNetHelper_Contracts.Extension.ExtCollection.AddRange``1(System.Data.IDataParameterCollection,System.Collections.Generic.IEnumerable{``0})
  commentId: M:DotNetHelper_Contracts.Extension.ExtCollection.AddRange``1(System.Data.IDataParameterCollection,System.Collections.Generic.IEnumerable{``0})
  id: AddRange``1(System.Data.IDataParameterCollection,System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: DotNetHelper_Contracts.Extension.ExtCollection
  langs:
  - csharp
  - vb
  name: AddRange<T>(IDataParameterCollection, IEnumerable<T>)
  nameWithType: ExtCollection.AddRange<T>(IDataParameterCollection, IEnumerable<T>)
  fullName: DotNetHelper_Contracts.Extension.ExtCollection.AddRange<T>(System.Data.IDataParameterCollection, System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote:
      path: src/DotNetHelper-Contracts/Extension/ExtList.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-Contracts
    id: AddRange
    path: ../src/DotNetHelper-Contracts/Extension/ExtList.cs
    startLine: 168
  assemblies:
  - DotNetHelper-Contracts
  namespace: DotNetHelper_Contracts.Extension
  syntax:
    content: public static void AddRange<T>(this IDataParameterCollection collection, IEnumerable<T> collectionToAdd)
    parameters:
    - id: collection
      type: System.Data.IDataParameterCollection
    - id: collectionToAdd
      type: System.Collections.Generic.IEnumerable{{T}}
    typeParameters:
    - id: T
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub AddRange(Of T)(collection As IDataParameterCollection, collectionToAdd As IEnumerable(Of T))
  overload: DotNetHelper_Contracts.Extension.ExtCollection.AddRange*
  nameWithType.vb: ExtCollection.AddRange(Of T)(IDataParameterCollection, IEnumerable(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: DotNetHelper_Contracts.Extension.ExtCollection.AddRange(Of T)(System.Data.IDataParameterCollection, System.Collections.Generic.IEnumerable(Of T))
  name.vb: AddRange(Of T)(IDataParameterCollection, IEnumerable(Of T))
- uid: DotNetHelper_Contracts.Extension.ExtCollection.RemoveRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.ICollection{``0})
  commentId: M:DotNetHelper_Contracts.Extension.ExtCollection.RemoveRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.ICollection{``0})
  id: RemoveRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.ICollection{``0})
  isExtensionMethod: true
  parent: DotNetHelper_Contracts.Extension.ExtCollection
  langs:
  - csharp
  - vb
  name: RemoveRange<T>(ICollection<T>, ICollection<T>)
  nameWithType: ExtCollection.RemoveRange<T>(ICollection<T>, ICollection<T>)
  fullName: DotNetHelper_Contracts.Extension.ExtCollection.RemoveRange<T>(System.Collections.Generic.ICollection<T>, System.Collections.Generic.ICollection<T>)
  type: Method
  source:
    remote:
      path: src/DotNetHelper-Contracts/Extension/ExtList.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-Contracts
    id: RemoveRange
    path: ../src/DotNetHelper-Contracts/Extension/ExtList.cs
    startLine: 177
  assemblies:
  - DotNetHelper-Contracts
  namespace: DotNetHelper_Contracts.Extension
  syntax:
    content: public static void RemoveRange<T>(this ICollection<T> collection, ICollection<T> collectionToRemove)
    parameters:
    - id: collection
      type: System.Collections.Generic.ICollection{{T}}
    - id: collectionToRemove
      type: System.Collections.Generic.ICollection{{T}}
    typeParameters:
    - id: T
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub RemoveRange(Of T)(collection As ICollection(Of T), collectionToRemove As ICollection(Of T))
  overload: DotNetHelper_Contracts.Extension.ExtCollection.RemoveRange*
  nameWithType.vb: ExtCollection.RemoveRange(Of T)(ICollection(Of T), ICollection(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: DotNetHelper_Contracts.Extension.ExtCollection.RemoveRange(Of T)(System.Collections.Generic.ICollection(Of T), System.Collections.Generic.ICollection(Of T))
  name.vb: RemoveRange(Of T)(ICollection(Of T), ICollection(Of T))
- uid: DotNetHelper_Contracts.Extension.ExtCollection.ParamToSql(System.Data.IDataParameterCollection,System.String)
  commentId: M:DotNetHelper_Contracts.Extension.ExtCollection.ParamToSql(System.Data.IDataParameterCollection,System.String)
  id: ParamToSql(System.Data.IDataParameterCollection,System.String)
  isExtensionMethod: true
  parent: DotNetHelper_Contracts.Extension.ExtCollection
  langs:
  - csharp
  - vb
  name: ParamToSql(IDataParameterCollection, String)
  nameWithType: ExtCollection.ParamToSql(IDataParameterCollection, String)
  fullName: DotNetHelper_Contracts.Extension.ExtCollection.ParamToSql(System.Data.IDataParameterCollection, System.String)
  type: Method
  source:
    remote:
      path: src/DotNetHelper-Contracts/Extension/ExtList.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-Contracts
    id: ParamToSql
    path: ../src/DotNetHelper-Contracts/Extension/ExtList.cs
    startLine: 183
  assemblies:
  - DotNetHelper-Contracts
  namespace: DotNetHelper_Contracts.Extension
  syntax:
    content: public static string ParamToSql(this IDataParameterCollection list, string query)
    parameters:
    - id: list
      type: System.Data.IDataParameterCollection
    - id: query
      type: System.String
    return:
      type: System.String
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ParamToSql(list As IDataParameterCollection, query As String) As String
  overload: DotNetHelper_Contracts.Extension.ExtCollection.ParamToSql*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: DotNetHelper_Contracts.Extension
  commentId: N:DotNetHelper_Contracts.Extension
  name: DotNetHelper_Contracts.Extension
  nameWithType: DotNetHelper_Contracts.Extension
  fullName: DotNetHelper_Contracts.Extension
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: DotNetHelper_Contracts.Extension.ExtCollection.IsNullOrEmpty*
  commentId: Overload:DotNetHelper_Contracts.Extension.ExtCollection.IsNullOrEmpty
  name: IsNullOrEmpty
  nameWithType: ExtCollection.IsNullOrEmpty
  fullName: DotNetHelper_Contracts.Extension.ExtCollection.IsNullOrEmpty
- uid: System.Collections.ICollection
  commentId: T:System.Collections.ICollection
  parent: System.Collections
  isExternal: true
  name: ICollection
  nameWithType: ICollection
  fullName: System.Collections.ICollection
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: DotNetHelper_Contracts.Extension.ExtCollection.ForEach*
  commentId: Overload:DotNetHelper_Contracts.Extension.ExtCollection.ForEach
  name: ForEach
  nameWithType: ExtCollection.ForEach
  fullName: DotNetHelper_Contracts.Extension.ExtCollection.ForEach
- uid: System.Collections.Generic.ICollection{{T}}
  commentId: T:System.Collections.Generic.ICollection{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action{{T}}
  commentId: T:System.Action{``0}
  parent: System
  definition: System.Action`1
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: DotNetHelper_Contracts.Extension.ExtCollection.AddRange*
  commentId: Overload:DotNetHelper_Contracts.Extension.ExtCollection.AddRange
  name: AddRange
  nameWithType: ExtCollection.AddRange
  fullName: DotNetHelper_Contracts.Extension.ExtCollection.AddRange
- uid: System.Data.IDataParameterCollection
  commentId: T:System.Data.IDataParameterCollection
  parent: System.Data
  isExternal: true
  name: IDataParameterCollection
  nameWithType: IDataParameterCollection
  fullName: System.Data.IDataParameterCollection
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: T:System.Collections.Generic.IEnumerable{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Data
  commentId: N:System.Data
  isExternal: true
  name: System.Data
  nameWithType: System.Data
  fullName: System.Data
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: DotNetHelper_Contracts.Extension.ExtCollection.RemoveRange*
  commentId: Overload:DotNetHelper_Contracts.Extension.ExtCollection.RemoveRange
  name: RemoveRange
  nameWithType: ExtCollection.RemoveRange
  fullName: DotNetHelper_Contracts.Extension.ExtCollection.RemoveRange
- uid: DotNetHelper_Contracts.Extension.ExtCollection.ParamToSql*
  commentId: Overload:DotNetHelper_Contracts.Extension.ExtCollection.ParamToSql
  name: ParamToSql
  nameWithType: ExtCollection.ParamToSql
  fullName: DotNetHelper_Contracts.Extension.ExtCollection.ParamToSql
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
