### YamlMime:ManagedReference
items:
- uid: DotNetHelper_Contracts.Helpers.RegexHelper
  commentId: T:DotNetHelper_Contracts.Helpers.RegexHelper
  id: RegexHelper
  parent: DotNetHelper_Contracts.Helpers
  children:
  - DotNetHelper_Contracts.Helpers.RegexHelper.HasLetter(System.String)
  - DotNetHelper_Contracts.Helpers.RegexHelper.HasLettersAndNumbersOnly(System.String)
  - DotNetHelper_Contracts.Helpers.RegexHelper.HasLettersNumbersAndUnderscoreOnly(System.String)
  - DotNetHelper_Contracts.Helpers.RegexHelper.HasLettersOnly(System.String)
  - DotNetHelper_Contracts.Helpers.RegexHelper.HasLowerCase(System.String)
  - DotNetHelper_Contracts.Helpers.RegexHelper.HasNumber(System.String)
  - DotNetHelper_Contracts.Helpers.RegexHelper.HasSpecialCharacters(System.String)
  - DotNetHelper_Contracts.Helpers.RegexHelper.HasSpecialCharactersRegEx(System.String)
  - DotNetHelper_Contracts.Helpers.RegexHelper.HasUpperCase(System.String)
  - DotNetHelper_Contracts.Helpers.RegexHelper.IsPasswordSecured(System.String)
  - DotNetHelper_Contracts.Helpers.RegexHelper.RemoveSpecialCharacters(System.String)
  - DotNetHelper_Contracts.Helpers.RegexHelper.StringOccurrenceCount(System.String,System.String)
  langs:
  - csharp
  - vb
  name: RegexHelper
  nameWithType: RegexHelper
  fullName: DotNetHelper_Contracts.Helpers.RegexHelper
  type: Class
  source:
    remote:
      path: src/DotNetHelper-Contracts/Helpers/RegexHelper.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-Contracts
    id: RegexHelper
    path: ../src/DotNetHelper-Contracts/Helpers/RegexHelper.cs
    startLine: 5
  assemblies:
  - DotNetHelper-Contracts
  namespace: DotNetHelper_Contracts.Helpers
  syntax:
    content: public static class RegexHelper
    content.vb: Public Module RegexHelper
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: DotNetHelper_Contracts.Helpers.RegexHelper.StringOccurrenceCount(System.String,System.String)
  commentId: M:DotNetHelper_Contracts.Helpers.RegexHelper.StringOccurrenceCount(System.String,System.String)
  id: StringOccurrenceCount(System.String,System.String)
  parent: DotNetHelper_Contracts.Helpers.RegexHelper
  langs:
  - csharp
  - vb
  name: StringOccurrenceCount(String, String)
  nameWithType: RegexHelper.StringOccurrenceCount(String, String)
  fullName: DotNetHelper_Contracts.Helpers.RegexHelper.StringOccurrenceCount(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/DotNetHelper-Contracts/Helpers/RegexHelper.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-Contracts
    id: StringOccurrenceCount
    path: ../src/DotNetHelper-Contracts/Helpers/RegexHelper.cs
    startLine: 8
  assemblies:
  - DotNetHelper-Contracts
  namespace: DotNetHelper_Contracts.Helpers
  syntax:
    content: public static int StringOccurrenceCount(string value, string lookFor)
    parameters:
    - id: value
      type: System.String
    - id: lookFor
      type: System.String
    return:
      type: System.Int32
    content.vb: Public Shared Function StringOccurrenceCount(value As String, lookFor As String) As Integer
  overload: DotNetHelper_Contracts.Helpers.RegexHelper.StringOccurrenceCount*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: DotNetHelper_Contracts.Helpers.RegexHelper.IsPasswordSecured(System.String)
  commentId: M:DotNetHelper_Contracts.Helpers.RegexHelper.IsPasswordSecured(System.String)
  id: IsPasswordSecured(System.String)
  parent: DotNetHelper_Contracts.Helpers.RegexHelper
  langs:
  - csharp
  - vb
  name: IsPasswordSecured(String)
  nameWithType: RegexHelper.IsPasswordSecured(String)
  fullName: DotNetHelper_Contracts.Helpers.RegexHelper.IsPasswordSecured(System.String)
  type: Method
  source:
    remote:
      path: src/DotNetHelper-Contracts/Helpers/RegexHelper.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-Contracts
    id: IsPasswordSecured
    path: ../src/DotNetHelper-Contracts/Helpers/RegexHelper.cs
    startLine: 16
  assemblies:
  - DotNetHelper-Contracts
  namespace: DotNetHelper_Contracts.Helpers
  syntax:
    content: public static bool IsPasswordSecured(string inputVal)
    parameters:
    - id: inputVal
      type: System.String
    return:
      type: System.Boolean
    content.vb: Public Shared Function IsPasswordSecured(inputVal As String) As Boolean
  overload: DotNetHelper_Contracts.Helpers.RegexHelper.IsPasswordSecured*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: DotNetHelper_Contracts.Helpers.RegexHelper.HasSpecialCharactersRegEx(System.String)
  commentId: M:DotNetHelper_Contracts.Helpers.RegexHelper.HasSpecialCharactersRegEx(System.String)
  id: HasSpecialCharactersRegEx(System.String)
  parent: DotNetHelper_Contracts.Helpers.RegexHelper
  langs:
  - csharp
  - vb
  name: HasSpecialCharactersRegEx(String)
  nameWithType: RegexHelper.HasSpecialCharactersRegEx(String)
  fullName: DotNetHelper_Contracts.Helpers.RegexHelper.HasSpecialCharactersRegEx(System.String)
  type: Method
  source:
    remote:
      path: src/DotNetHelper-Contracts/Helpers/RegexHelper.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-Contracts
    id: HasSpecialCharactersRegEx
    path: ../src/DotNetHelper-Contracts/Helpers/RegexHelper.cs
    startLine: 27
  assemblies:
  - DotNetHelper-Contracts
  namespace: DotNetHelper_Contracts.Helpers
  syntax:
    content: public static bool HasSpecialCharactersRegEx(string inputString)
    parameters:
    - id: inputString
      type: System.String
    return:
      type: System.Boolean
    content.vb: Public Shared Function HasSpecialCharactersRegEx(inputString As String) As Boolean
  overload: DotNetHelper_Contracts.Helpers.RegexHelper.HasSpecialCharactersRegEx*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: DotNetHelper_Contracts.Helpers.RegexHelper.HasUpperCase(System.String)
  commentId: M:DotNetHelper_Contracts.Helpers.RegexHelper.HasUpperCase(System.String)
  id: HasUpperCase(System.String)
  parent: DotNetHelper_Contracts.Helpers.RegexHelper
  langs:
  - csharp
  - vb
  name: HasUpperCase(String)
  nameWithType: RegexHelper.HasUpperCase(String)
  fullName: DotNetHelper_Contracts.Helpers.RegexHelper.HasUpperCase(System.String)
  type: Method
  source:
    remote:
      path: src/DotNetHelper-Contracts/Helpers/RegexHelper.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-Contracts
    id: HasUpperCase
    path: ../src/DotNetHelper-Contracts/Helpers/RegexHelper.cs
    startLine: 41
  assemblies:
  - DotNetHelper-Contracts
  namespace: DotNetHelper_Contracts.Helpers
  syntax:
    content: public static bool HasUpperCase(string inputString)
    parameters:
    - id: inputString
      type: System.String
    return:
      type: System.Boolean
    content.vb: Public Shared Function HasUpperCase(inputString As String) As Boolean
  overload: DotNetHelper_Contracts.Helpers.RegexHelper.HasUpperCase*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: DotNetHelper_Contracts.Helpers.RegexHelper.HasLowerCase(System.String)
  commentId: M:DotNetHelper_Contracts.Helpers.RegexHelper.HasLowerCase(System.String)
  id: HasLowerCase(System.String)
  parent: DotNetHelper_Contracts.Helpers.RegexHelper
  langs:
  - csharp
  - vb
  name: HasLowerCase(String)
  nameWithType: RegexHelper.HasLowerCase(String)
  fullName: DotNetHelper_Contracts.Helpers.RegexHelper.HasLowerCase(System.String)
  type: Method
  source:
    remote:
      path: src/DotNetHelper-Contracts/Helpers/RegexHelper.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-Contracts
    id: HasLowerCase
    path: ../src/DotNetHelper-Contracts/Helpers/RegexHelper.cs
    startLine: 54
  assemblies:
  - DotNetHelper-Contracts
  namespace: DotNetHelper_Contracts.Helpers
  syntax:
    content: public static bool HasLowerCase(string inputString)
    parameters:
    - id: inputString
      type: System.String
    return:
      type: System.Boolean
    content.vb: Public Shared Function HasLowerCase(inputString As String) As Boolean
  overload: DotNetHelper_Contracts.Helpers.RegexHelper.HasLowerCase*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: DotNetHelper_Contracts.Helpers.RegexHelper.HasLettersOnly(System.String)
  commentId: M:DotNetHelper_Contracts.Helpers.RegexHelper.HasLettersOnly(System.String)
  id: HasLettersOnly(System.String)
  parent: DotNetHelper_Contracts.Helpers.RegexHelper
  langs:
  - csharp
  - vb
  name: HasLettersOnly(String)
  nameWithType: RegexHelper.HasLettersOnly(String)
  fullName: DotNetHelper_Contracts.Helpers.RegexHelper.HasLettersOnly(System.String)
  type: Method
  source:
    remote:
      path: src/DotNetHelper-Contracts/Helpers/RegexHelper.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-Contracts
    id: HasLettersOnly
    path: ../src/DotNetHelper-Contracts/Helpers/RegexHelper.cs
    startLine: 70
  assemblies:
  - DotNetHelper-Contracts
  namespace: DotNetHelper_Contracts.Helpers
  summary: "\nCheck if string contains letters only supports international letters too.\n"
  example: []
  syntax:
    content: public static bool HasLettersOnly(string inputString)
    parameters:
    - id: inputString
      type: System.String
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Shared Function HasLettersOnly(inputString As String) As Boolean
  overload: DotNetHelper_Contracts.Helpers.RegexHelper.HasLettersOnly*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: DotNetHelper_Contracts.Helpers.RegexHelper.HasLetter(System.String)
  commentId: M:DotNetHelper_Contracts.Helpers.RegexHelper.HasLetter(System.String)
  id: HasLetter(System.String)
  parent: DotNetHelper_Contracts.Helpers.RegexHelper
  langs:
  - csharp
  - vb
  name: HasLetter(String)
  nameWithType: RegexHelper.HasLetter(String)
  fullName: DotNetHelper_Contracts.Helpers.RegexHelper.HasLetter(System.String)
  type: Method
  source:
    remote:
      path: src/DotNetHelper-Contracts/Helpers/RegexHelper.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-Contracts
    id: HasLetter
    path: ../src/DotNetHelper-Contracts/Helpers/RegexHelper.cs
    startLine: 76
  assemblies:
  - DotNetHelper-Contracts
  namespace: DotNetHelper_Contracts.Helpers
  syntax:
    content: public static bool HasLetter(string inputString)
    parameters:
    - id: inputString
      type: System.String
    return:
      type: System.Boolean
    content.vb: Public Shared Function HasLetter(inputString As String) As Boolean
  overload: DotNetHelper_Contracts.Helpers.RegexHelper.HasLetter*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: DotNetHelper_Contracts.Helpers.RegexHelper.HasLettersAndNumbersOnly(System.String)
  commentId: M:DotNetHelper_Contracts.Helpers.RegexHelper.HasLettersAndNumbersOnly(System.String)
  id: HasLettersAndNumbersOnly(System.String)
  parent: DotNetHelper_Contracts.Helpers.RegexHelper
  langs:
  - csharp
  - vb
  name: HasLettersAndNumbersOnly(String)
  nameWithType: RegexHelper.HasLettersAndNumbersOnly(String)
  fullName: DotNetHelper_Contracts.Helpers.RegexHelper.HasLettersAndNumbersOnly(System.String)
  type: Method
  source:
    remote:
      path: src/DotNetHelper-Contracts/Helpers/RegexHelper.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-Contracts
    id: HasLettersAndNumbersOnly
    path: ../src/DotNetHelper-Contracts/Helpers/RegexHelper.cs
    startLine: 87
  assemblies:
  - DotNetHelper-Contracts
  namespace: DotNetHelper_Contracts.Helpers
  summary: "\nCheck if string contains letters only supports international letters too.\n"
  example: []
  syntax:
    content: public static bool HasLettersAndNumbersOnly(string inputString)
    parameters:
    - id: inputString
      type: System.String
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Shared Function HasLettersAndNumbersOnly(inputString As String) As Boolean
  overload: DotNetHelper_Contracts.Helpers.RegexHelper.HasLettersAndNumbersOnly*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: DotNetHelper_Contracts.Helpers.RegexHelper.HasLettersNumbersAndUnderscoreOnly(System.String)
  commentId: M:DotNetHelper_Contracts.Helpers.RegexHelper.HasLettersNumbersAndUnderscoreOnly(System.String)
  id: HasLettersNumbersAndUnderscoreOnly(System.String)
  parent: DotNetHelper_Contracts.Helpers.RegexHelper
  langs:
  - csharp
  - vb
  name: HasLettersNumbersAndUnderscoreOnly(String)
  nameWithType: RegexHelper.HasLettersNumbersAndUnderscoreOnly(String)
  fullName: DotNetHelper_Contracts.Helpers.RegexHelper.HasLettersNumbersAndUnderscoreOnly(System.String)
  type: Method
  source:
    remote:
      path: src/DotNetHelper-Contracts/Helpers/RegexHelper.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-Contracts
    id: HasLettersNumbersAndUnderscoreOnly
    path: ../src/DotNetHelper-Contracts/Helpers/RegexHelper.cs
    startLine: 97
  assemblies:
  - DotNetHelper-Contracts
  namespace: DotNetHelper_Contracts.Helpers
  summary: "\nCheck if string contains letters only supports international letters too.\n"
  example: []
  syntax:
    content: public static bool HasLettersNumbersAndUnderscoreOnly(string inputString)
    parameters:
    - id: inputString
      type: System.String
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Shared Function HasLettersNumbersAndUnderscoreOnly(inputString As String) As Boolean
  overload: DotNetHelper_Contracts.Helpers.RegexHelper.HasLettersNumbersAndUnderscoreOnly*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: DotNetHelper_Contracts.Helpers.RegexHelper.HasNumber(System.String)
  commentId: M:DotNetHelper_Contracts.Helpers.RegexHelper.HasNumber(System.String)
  id: HasNumber(System.String)
  parent: DotNetHelper_Contracts.Helpers.RegexHelper
  langs:
  - csharp
  - vb
  name: HasNumber(String)
  nameWithType: RegexHelper.HasNumber(String)
  fullName: DotNetHelper_Contracts.Helpers.RegexHelper.HasNumber(System.String)
  type: Method
  source:
    remote:
      path: src/DotNetHelper-Contracts/Helpers/RegexHelper.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-Contracts
    id: HasNumber
    path: ../src/DotNetHelper-Contracts/Helpers/RegexHelper.cs
    startLine: 106
  assemblies:
  - DotNetHelper-Contracts
  namespace: DotNetHelper_Contracts.Helpers
  syntax:
    content: public static bool HasNumber(string inputString)
    parameters:
    - id: inputString
      type: System.String
    return:
      type: System.Boolean
    content.vb: Public Shared Function HasNumber(inputString As String) As Boolean
  overload: DotNetHelper_Contracts.Helpers.RegexHelper.HasNumber*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: DotNetHelper_Contracts.Helpers.RegexHelper.RemoveSpecialCharacters(System.String)
  commentId: M:DotNetHelper_Contracts.Helpers.RegexHelper.RemoveSpecialCharacters(System.String)
  id: RemoveSpecialCharacters(System.String)
  parent: DotNetHelper_Contracts.Helpers.RegexHelper
  langs:
  - csharp
  - vb
  name: RemoveSpecialCharacters(String)
  nameWithType: RegexHelper.RemoveSpecialCharacters(String)
  fullName: DotNetHelper_Contracts.Helpers.RegexHelper.RemoveSpecialCharacters(System.String)
  type: Method
  source:
    remote:
      path: src/DotNetHelper-Contracts/Helpers/RegexHelper.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-Contracts
    id: RemoveSpecialCharacters
    path: ../src/DotNetHelper-Contracts/Helpers/RegexHelper.cs
    startLine: 118
  assemblies:
  - DotNetHelper-Contracts
  namespace: DotNetHelper_Contracts.Helpers
  syntax:
    content: public static string RemoveSpecialCharacters(string inputString)
    parameters:
    - id: inputString
      type: System.String
    return:
      type: System.String
    content.vb: Public Shared Function RemoveSpecialCharacters(inputString As String) As String
  overload: DotNetHelper_Contracts.Helpers.RegexHelper.RemoveSpecialCharacters*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: DotNetHelper_Contracts.Helpers.RegexHelper.HasSpecialCharacters(System.String)
  commentId: M:DotNetHelper_Contracts.Helpers.RegexHelper.HasSpecialCharacters(System.String)
  id: HasSpecialCharacters(System.String)
  parent: DotNetHelper_Contracts.Helpers.RegexHelper
  langs:
  - csharp
  - vb
  name: HasSpecialCharacters(String)
  nameWithType: RegexHelper.HasSpecialCharacters(String)
  fullName: DotNetHelper_Contracts.Helpers.RegexHelper.HasSpecialCharacters(System.String)
  type: Method
  source:
    remote:
      path: src/DotNetHelper-Contracts/Helpers/RegexHelper.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-Contracts
    id: HasSpecialCharacters
    path: ../src/DotNetHelper-Contracts/Helpers/RegexHelper.cs
    startLine: 131
  assemblies:
  - DotNetHelper-Contracts
  namespace: DotNetHelper_Contracts.Helpers
  syntax:
    content: public static bool HasSpecialCharacters(string inputString)
    parameters:
    - id: inputString
      type: System.String
    return:
      type: System.Boolean
    content.vb: Public Shared Function HasSpecialCharacters(inputString As String) As Boolean
  overload: DotNetHelper_Contracts.Helpers.RegexHelper.HasSpecialCharacters*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: DotNetHelper_Contracts.Helpers
  commentId: N:DotNetHelper_Contracts.Helpers
  name: DotNetHelper_Contracts.Helpers
  nameWithType: DotNetHelper_Contracts.Helpers
  fullName: DotNetHelper_Contracts.Helpers
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: DotNetHelper_Contracts.Helpers.RegexHelper.StringOccurrenceCount*
  commentId: Overload:DotNetHelper_Contracts.Helpers.RegexHelper.StringOccurrenceCount
  name: StringOccurrenceCount
  nameWithType: RegexHelper.StringOccurrenceCount
  fullName: DotNetHelper_Contracts.Helpers.RegexHelper.StringOccurrenceCount
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: DotNetHelper_Contracts.Helpers.RegexHelper.IsPasswordSecured*
  commentId: Overload:DotNetHelper_Contracts.Helpers.RegexHelper.IsPasswordSecured
  name: IsPasswordSecured
  nameWithType: RegexHelper.IsPasswordSecured
  fullName: DotNetHelper_Contracts.Helpers.RegexHelper.IsPasswordSecured
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: DotNetHelper_Contracts.Helpers.RegexHelper.HasSpecialCharactersRegEx*
  commentId: Overload:DotNetHelper_Contracts.Helpers.RegexHelper.HasSpecialCharactersRegEx
  name: HasSpecialCharactersRegEx
  nameWithType: RegexHelper.HasSpecialCharactersRegEx
  fullName: DotNetHelper_Contracts.Helpers.RegexHelper.HasSpecialCharactersRegEx
- uid: DotNetHelper_Contracts.Helpers.RegexHelper.HasUpperCase*
  commentId: Overload:DotNetHelper_Contracts.Helpers.RegexHelper.HasUpperCase
  name: HasUpperCase
  nameWithType: RegexHelper.HasUpperCase
  fullName: DotNetHelper_Contracts.Helpers.RegexHelper.HasUpperCase
- uid: DotNetHelper_Contracts.Helpers.RegexHelper.HasLowerCase*
  commentId: Overload:DotNetHelper_Contracts.Helpers.RegexHelper.HasLowerCase
  name: HasLowerCase
  nameWithType: RegexHelper.HasLowerCase
  fullName: DotNetHelper_Contracts.Helpers.RegexHelper.HasLowerCase
- uid: DotNetHelper_Contracts.Helpers.RegexHelper.HasLettersOnly*
  commentId: Overload:DotNetHelper_Contracts.Helpers.RegexHelper.HasLettersOnly
  name: HasLettersOnly
  nameWithType: RegexHelper.HasLettersOnly
  fullName: DotNetHelper_Contracts.Helpers.RegexHelper.HasLettersOnly
- uid: DotNetHelper_Contracts.Helpers.RegexHelper.HasLetter*
  commentId: Overload:DotNetHelper_Contracts.Helpers.RegexHelper.HasLetter
  name: HasLetter
  nameWithType: RegexHelper.HasLetter
  fullName: DotNetHelper_Contracts.Helpers.RegexHelper.HasLetter
- uid: DotNetHelper_Contracts.Helpers.RegexHelper.HasLettersAndNumbersOnly*
  commentId: Overload:DotNetHelper_Contracts.Helpers.RegexHelper.HasLettersAndNumbersOnly
  name: HasLettersAndNumbersOnly
  nameWithType: RegexHelper.HasLettersAndNumbersOnly
  fullName: DotNetHelper_Contracts.Helpers.RegexHelper.HasLettersAndNumbersOnly
- uid: DotNetHelper_Contracts.Helpers.RegexHelper.HasLettersNumbersAndUnderscoreOnly*
  commentId: Overload:DotNetHelper_Contracts.Helpers.RegexHelper.HasLettersNumbersAndUnderscoreOnly
  name: HasLettersNumbersAndUnderscoreOnly
  nameWithType: RegexHelper.HasLettersNumbersAndUnderscoreOnly
  fullName: DotNetHelper_Contracts.Helpers.RegexHelper.HasLettersNumbersAndUnderscoreOnly
- uid: DotNetHelper_Contracts.Helpers.RegexHelper.HasNumber*
  commentId: Overload:DotNetHelper_Contracts.Helpers.RegexHelper.HasNumber
  name: HasNumber
  nameWithType: RegexHelper.HasNumber
  fullName: DotNetHelper_Contracts.Helpers.RegexHelper.HasNumber
- uid: DotNetHelper_Contracts.Helpers.RegexHelper.RemoveSpecialCharacters*
  commentId: Overload:DotNetHelper_Contracts.Helpers.RegexHelper.RemoveSpecialCharacters
  name: RemoveSpecialCharacters
  nameWithType: RegexHelper.RemoveSpecialCharacters
  fullName: DotNetHelper_Contracts.Helpers.RegexHelper.RemoveSpecialCharacters
- uid: DotNetHelper_Contracts.Helpers.RegexHelper.HasSpecialCharacters*
  commentId: Overload:DotNetHelper_Contracts.Helpers.RegexHelper.HasSpecialCharacters
  name: HasSpecialCharacters
  nameWithType: RegexHelper.HasSpecialCharacters
  fullName: DotNetHelper_Contracts.Helpers.RegexHelper.HasSpecialCharacters
