### YamlMime:ManagedReference
items:
- uid: DotNetHelper_Contracts.Extension.ExtList
  commentId: T:DotNetHelper_Contracts.Extension.ExtList
  id: ExtList
  parent: DotNetHelper_Contracts.Extension
  children:
  - DotNetHelper_Contracts.Extension.ExtList.BatchIntoGroups``1(List{``0},System.Int32)
  - DotNetHelper_Contracts.Extension.ExtList.BatchIntoGroupsWithMax``1(List{``0},System.Int32)
  - DotNetHelper_Contracts.Extension.ExtList.GetRandomItems``1(List{``0},System.Int32)
  - DotNetHelper_Contracts.Extension.ExtList.IsNullOrEmpty``1(List{``0},System.Func{``0,System.Boolean})
  langs:
  - csharp
  - vb
  name: ExtList
  nameWithType: ExtList
  fullName: DotNetHelper_Contracts.Extension.ExtList
  type: Class
  source:
    id: ExtList
    path: ''
    startLine: 1235
  assemblies:
  - cs.temp.dll
  namespace: DotNetHelper_Contracts.Extension
  syntax:
    content: public static class ExtList
    content.vb: Public Module ExtList
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: DotNetHelper_Contracts.Extension.ExtList.IsNullOrEmpty``1(List{``0},System.Func{``0,System.Boolean})
  commentId: M:DotNetHelper_Contracts.Extension.ExtList.IsNullOrEmpty``1(List{``0},System.Func{``0,System.Boolean})
  id: IsNullOrEmpty``1(List{``0},System.Func{``0,System.Boolean})
  isExtensionMethod: true
  parent: DotNetHelper_Contracts.Extension.ExtList
  langs:
  - csharp
  - vb
  name: IsNullOrEmpty<T>(List<T>, Func<T, Boolean>)
  nameWithType: ExtList.IsNullOrEmpty<T>(List<T>, Func<T, Boolean>)
  fullName: DotNetHelper_Contracts.Extension.ExtList.IsNullOrEmpty<T>(List<T>, System.Func<T, System.Boolean>)
  type: Method
  source:
    id: IsNullOrEmpty
    path: ''
    startLine: 1243
  assemblies:
  - cs.temp.dll
  namespace: DotNetHelper_Contracts.Extension
  summary: "\nMethod Name Pretty Much Says It All\n"
  example: []
  syntax:
    content: public static bool IsNullOrEmpty<T>(this List<T> source, Func<T, bool> whereClause = null)
    parameters:
    - id: source
      type: List{{T}}
      description: ''
    - id: whereClause
      type: System.Func{{T},System.Boolean}
      description: ''
    typeParameters:
    - id: T
    return:
      type: System.Boolean
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsNullOrEmpty(Of T)(source As List(Of T), whereClause As Func(Of T, Boolean) = Nothing) As Boolean
  overload: DotNetHelper_Contracts.Extension.ExtList.IsNullOrEmpty*
  nameWithType.vb: ExtList.IsNullOrEmpty(Of T)(List(Of T), Func(Of T, Boolean))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: DotNetHelper_Contracts.Extension.ExtList.IsNullOrEmpty(Of T)(List(Of T), System.Func(Of T, System.Boolean))
  name.vb: IsNullOrEmpty(Of T)(List(Of T), Func(Of T, Boolean))
- uid: DotNetHelper_Contracts.Extension.ExtList.GetRandomItems``1(List{``0},System.Int32)
  commentId: M:DotNetHelper_Contracts.Extension.ExtList.GetRandomItems``1(List{``0},System.Int32)
  id: GetRandomItems``1(List{``0},System.Int32)
  isExtensionMethod: true
  parent: DotNetHelper_Contracts.Extension.ExtList
  langs:
  - csharp
  - vb
  name: GetRandomItems<T>(List<T>, Int32)
  nameWithType: ExtList.GetRandomItems<T>(List<T>, Int32)
  fullName: DotNetHelper_Contracts.Extension.ExtList.GetRandomItems<T>(List<T>, System.Int32)
  type: Method
  source:
    id: GetRandomItems
    path: ''
    startLine: 1250
  assemblies:
  - cs.temp.dll
  namespace: DotNetHelper_Contracts.Extension
  syntax:
    content: public static List<T> GetRandomItems<T>(this List<T> list, int numberToReturn)
    parameters:
    - id: list
      type: List{{T}}
    - id: numberToReturn
      type: System.Int32
    typeParameters:
    - id: T
    return:
      type: List{{T}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetRandomItems(Of T)(list As List(Of T), numberToReturn As Integer) As List(Of T)
  overload: DotNetHelper_Contracts.Extension.ExtList.GetRandomItems*
  nameWithType.vb: ExtList.GetRandomItems(Of T)(List(Of T), Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: DotNetHelper_Contracts.Extension.ExtList.GetRandomItems(Of T)(List(Of T), System.Int32)
  name.vb: GetRandomItems(Of T)(List(Of T), Int32)
- uid: DotNetHelper_Contracts.Extension.ExtList.BatchIntoGroups``1(List{``0},System.Int32)
  commentId: M:DotNetHelper_Contracts.Extension.ExtList.BatchIntoGroups``1(List{``0},System.Int32)
  id: BatchIntoGroups``1(List{``0},System.Int32)
  isExtensionMethod: true
  parent: DotNetHelper_Contracts.Extension.ExtList
  langs:
  - csharp
  - vb
  name: BatchIntoGroups<T>(List<T>, Int32)
  nameWithType: ExtList.BatchIntoGroups<T>(List<T>, Int32)
  fullName: DotNetHelper_Contracts.Extension.ExtList.BatchIntoGroups<T>(List<T>, System.Int32)
  type: Method
  source:
    id: BatchIntoGroups
    path: ''
    startLine: 1260
  assemblies:
  - cs.temp.dll
  namespace: DotNetHelper_Contracts.Extension
  syntax:
    content: public static List<List<T>> BatchIntoGroups<T>(this List<T> source, int numberOfGroup)
    parameters:
    - id: source
      type: List{{T}}
    - id: numberOfGroup
      type: System.Int32
    typeParameters:
    - id: T
    return:
      type: List{List{{T}}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function BatchIntoGroups(Of T)(source As List(Of T), numberOfGroup As Integer) As List(Of List(Of T))
  overload: DotNetHelper_Contracts.Extension.ExtList.BatchIntoGroups*
  nameWithType.vb: ExtList.BatchIntoGroups(Of T)(List(Of T), Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: DotNetHelper_Contracts.Extension.ExtList.BatchIntoGroups(Of T)(List(Of T), System.Int32)
  name.vb: BatchIntoGroups(Of T)(List(Of T), Int32)
- uid: DotNetHelper_Contracts.Extension.ExtList.BatchIntoGroupsWithMax``1(List{``0},System.Int32)
  commentId: M:DotNetHelper_Contracts.Extension.ExtList.BatchIntoGroupsWithMax``1(List{``0},System.Int32)
  id: BatchIntoGroupsWithMax``1(List{``0},System.Int32)
  isExtensionMethod: true
  parent: DotNetHelper_Contracts.Extension.ExtList
  langs:
  - csharp
  - vb
  name: BatchIntoGroupsWithMax<T>(List<T>, Int32)
  nameWithType: ExtList.BatchIntoGroupsWithMax<T>(List<T>, Int32)
  fullName: DotNetHelper_Contracts.Extension.ExtList.BatchIntoGroupsWithMax<T>(List<T>, System.Int32)
  type: Method
  source:
    id: BatchIntoGroupsWithMax
    path: ''
    startLine: 1276
  assemblies:
  - cs.temp.dll
  namespace: DotNetHelper_Contracts.Extension
  summary: "\nreturn a list of the source in groups of specified\n"
  example: []
  syntax:
    content: public static List<IGrouping<int, T>> BatchIntoGroupsWithMax<T>(this List<T> source, int maxNumberOfItemsInPerGroup)
    parameters:
    - id: source
      type: List{{T}}
      description: ''
    - id: maxNumberOfItemsInPerGroup
      type: System.Int32
      description: ''
    typeParameters:
    - id: T
      description: ''
    return:
      type: List{IGrouping{System.Int32,{T}}}
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function BatchIntoGroupsWithMax(Of T)(source As List(Of T), maxNumberOfItemsInPerGroup As Integer) As List(Of IGrouping(Of Integer, T))
  overload: DotNetHelper_Contracts.Extension.ExtList.BatchIntoGroupsWithMax*
  nameWithType.vb: ExtList.BatchIntoGroupsWithMax(Of T)(List(Of T), Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: DotNetHelper_Contracts.Extension.ExtList.BatchIntoGroupsWithMax(Of T)(List(Of T), System.Int32)
  name.vb: BatchIntoGroupsWithMax(Of T)(List(Of T), Int32)
references:
- uid: DotNetHelper_Contracts.Extension
  commentId: N:DotNetHelper_Contracts.Extension
  name: DotNetHelper_Contracts.Extension
  nameWithType: DotNetHelper_Contracts.Extension
  fullName: DotNetHelper_Contracts.Extension
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: DotNetHelper_Contracts.Extension.ExtList.IsNullOrEmpty*
  commentId: Overload:DotNetHelper_Contracts.Extension.ExtList.IsNullOrEmpty
  name: IsNullOrEmpty
  nameWithType: ExtList.IsNullOrEmpty
  fullName: DotNetHelper_Contracts.Extension.ExtList.IsNullOrEmpty
- uid: List{{T}}
  commentId: '!:List{``0}'
  definition: List`1
  name: List<T>
  nameWithType: List<T>
  fullName: List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{T},System.Boolean}
  commentId: T:System.Func{``0,System.Boolean}
  parent: System
  definition: System.Func`2
  name: Func<T, Boolean>
  nameWithType: Func<T, Boolean>
  fullName: System.Func<T, System.Boolean>
  nameWithType.vb: Func(Of T, Boolean)
  fullName.vb: System.Func(Of T, System.Boolean)
  name.vb: Func(Of T, Boolean)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: List`1
  isExternal: true
  name: List<>
  nameWithType: List<>
  fullName: List<>
  nameWithType.vb: List(Of )
  fullName.vb: List(Of )
  name.vb: List(Of )
  spec.csharp:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: DotNetHelper_Contracts.Extension.ExtList.GetRandomItems*
  commentId: Overload:DotNetHelper_Contracts.Extension.ExtList.GetRandomItems
  name: GetRandomItems
  nameWithType: ExtList.GetRandomItems
  fullName: DotNetHelper_Contracts.Extension.ExtList.GetRandomItems
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: DotNetHelper_Contracts.Extension.ExtList.BatchIntoGroups*
  commentId: Overload:DotNetHelper_Contracts.Extension.ExtList.BatchIntoGroups
  name: BatchIntoGroups
  nameWithType: ExtList.BatchIntoGroups
  fullName: DotNetHelper_Contracts.Extension.ExtList.BatchIntoGroups
- uid: List{List{{T}}}
  commentId: '!:List{List{``0}}'
  definition: List`1
  name: List<List<T>>
  nameWithType: List<List<T>>
  fullName: List<List<T>>
  nameWithType.vb: List(Of List(Of T))
  fullName.vb: List(Of List(Of T))
  name.vb: List(Of List(Of T))
  spec.csharp:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: DotNetHelper_Contracts.Extension.ExtList.BatchIntoGroupsWithMax*
  commentId: Overload:DotNetHelper_Contracts.Extension.ExtList.BatchIntoGroupsWithMax
  name: BatchIntoGroupsWithMax
  nameWithType: ExtList.BatchIntoGroupsWithMax
  fullName: DotNetHelper_Contracts.Extension.ExtList.BatchIntoGroupsWithMax
- uid: List{IGrouping{System.Int32,{T}}}
  commentId: '!:List{IGrouping{System.Int32,``0}}'
  definition: List`1
  name: List<IGrouping<Int32, T>>
  nameWithType: List<IGrouping<Int32, T>>
  fullName: List<IGrouping<System.Int32, T>>
  nameWithType.vb: List(Of IGrouping(Of Int32, T))
  fullName.vb: List(Of IGrouping(Of System.Int32, T))
  name.vb: List(Of IGrouping(Of Int32, T))
  spec.csharp:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: IGrouping`2
    name: IGrouping
    nameWithType: IGrouping
    fullName: IGrouping
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: IGrouping`2
    name: IGrouping
    nameWithType: IGrouping
    fullName: IGrouping
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
